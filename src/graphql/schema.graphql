type User {
  id: ID!
  name: String!
  email: String!
  password: String
  status: String
  role: String
  registrationDate: String
  phone: String
  country: String
}

type AuthPayload {
  token: String!
  user: User!
}

input PaginationInput {
  page: Int
  pageSize: Int
}

input UserFilters {
  email: String
  role: String
  status: String
}

input SortInput {
  field: String
  order: String
}

type Metadata {
  total: Int!
  page: Int!
  pageSize: Int!
}

type UsersResponse {
  data: [User!]!
  metadata: Metadata!
}

type Query {
  usersConfig: [UserConfig!]!
}

type UserConfig {
  id: ID!
  name: String!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  name: String!
  email: String!
  password: String!
  phone: String!
  country: String!
  role: String
}

input EditUserInput {
  name: String
  email: String
  phone: String
  country: String
  role: String
  status: String
}

type Query {
  users(pagination: PaginationInput, filters: UserFilters, sort: SortInput): UsersResponse!
  me: User
}

type Mutation {
  login(input: LoginInput!): AuthPayload!
  register(input: RegisterInput!): AuthPayload!
  logout: Boolean!
  createUser(
    name: String!
    email: String!
    phone: String!
    country: String!
    role: String!
    status: String!
  ): User!
  deleteUser(id: ID!): Boolean!
  editUser(id: ID!, input: EditUserInput!): User!
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  BLOCKED
  DONE
  CANCELLED
}

type Task {
  id: ID!
  title: String!
  description: String
  status: TaskStatus!
  assignee: User
  createdAt: String!
  updatedAt: String!
  assigneeId: String
}

input TaskInput {
  title: String!
  description: String
  assigneeId: ID
}

input UpdateTaskInput {
  title: String
  description: String
  status: String
  assigneeId: ID
}

input TaskFilters {
  status: String
  search: String
  assignee: String
}

type TasksResponse {
  data: [Task!]!
  metadata: Metadata!
}

extend type Query {
  tasks(pagination: PaginationInput, filters: TaskFilters): TasksResponse!
  task(id: ID!): Task
}

extend type Mutation {
  createTask(input: TaskInput!): Task!
  updateTask(id: ID!, input: UpdateTaskInput!): Task!
  deleteTask(id: ID!): Boolean!
}
